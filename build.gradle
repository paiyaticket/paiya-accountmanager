plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id "org.sonarqube" version "6.0.0.5145"
	id 'jacoco'
}

group = 'events.paiya'
version = '0.0.1-SNAPSHOT'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

ext {
	mapstructVersion = "1.6.3"
	lombokVersion = '1.18.36'
	lombokMapstructBindingVersion = "0.2.0"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

compileJava {
	options.compilerArgs += [
			'-Amapstruct.suppressGeneratorTimestamp=true',
			'-Amapstruct.suppressGeneratorVersionInfoComment=true',
			'-Amapstruct.verbose=false',
			'-Amapstruct.unmappedTargetPolicy=IGNORE',
			'-Amapstruct.unmappedSourcePolicy=IGNORE'
	]
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'

	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	implementation "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

/*
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Amapstruct.verbose=true"
}
*/


//*****************//
// INTEGRATION TEST//
//*****************//

sourceSets {
	integrationTest {
		java {
			srcDirs = ['src/integrationTest/java']
		}
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath

	useJUnitPlatform()
}


//***********************//
// SONAR STATIC ANALYSIS //
//***********************//
sonar {
	properties {
		property "sonar.projectKey", "paiyaticket_paiya-accountmanager"
		property "sonar.projectName", "paiya-accountmanager"
		property "sonar.organization", "paiyaticket"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.sources", "src/main/java/events/paiya/accountmanager/services"
		property "sonar.tests", "src/test"
	}
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}